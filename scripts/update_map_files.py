"""
Take the map files based off the previous genome and generate new versions.
Along with the old PEDs this will allow for the LD, Fst, and gene search to be
update relative to v3 of the Atlantic salmon genome.
"""
import os 
import pandas as pd

def read_map_file(infile, header = False):
    """Read in a header, accounting for whether or not there is a header line."""
    if header:
        return pd.read_csv(infile, sep="\t")
    return pd.read_csv(infile, sep="\t", names=['CHR', 'SNP', 'ZERO', 'POS'])


def write_map_file(df, outfile, header = False):
    """Write a map dataframe to a file. Default is without a header"""
    print(f"writing dataframe to file: {outfile}")
    df[["CHR", "SNP", "ZERO", "POS"]].to_csv(out_file, header=header, sep = '\t', index = False)


def update_map_file(old_map, v3_map):
    """Pull the v3 map information for the list of SNPs in the old map.
        
        Maintains the previous order of the SNPs for safe interfacing with
        old map's corresponding PED file."""
    return pd.merge(old_map["SNP"], v3_map, how = "left")


#map_df = v3_map
def approximate_unplaced_v3(map_df):
    """ For SNPs with inexact SNP positions but known locations relative to neighbours, 
        average the position of the preceeding and trailing SNPs."""
    updated_pos = []
    for i, pos in enumerate(map_df["POS"].values):
        if pos == "-":
            prev_snp = map_df["POS"].values[i-1]
            post_snp = map_df["POS"].values[i+1]
            #account for when the lead or lag also unknown
            if prev_snp == "-":
                lead_pos = i-1
                while prev_snp == "-":
                    lead_pos-=1
                    prev_snp = map_df["POS"].values[lead_pos]
            if post_snp == "-":
                trail_pos = i+1
                while post_snp == "-":
                    trail_pos+=1
                    post_snp = map_df["POS"].values[trail_pos]
            prev_snp = int(prev_snp)
            post_snp = int(post_snp)
            new_pos = ((prev_snp + post_snp)/2)
            updated_pos.append(int(new_pos))
        else:
            updated_pos.append(int(pos))
    map_df["POS"] = updated_pos
    return map_df


if __name__ == "__main__":

    V3_PREFIX = "v3_updated_"    

    V3_MAP = "../data/raw/genome_update/Ssa220K_v3_Genome.map"
    v3_map = read_map_file(V3_MAP, header = True)

    v3_map_impute = approximate_unplaced_v3(v3_map)

    print("TODO - get approx positions for the '-' SNPs, avg preceeding and following")

    OLD_MAPS_TO_UPDATE = ["old_wildNA_220k_filtered.map", "old_Labrador_220k_filtered.map",
                            "old_Newfoundland_220k_filtered.map", "old_STLawrence_220k_filtered.map",
                            "old_noLDfilter_220k_filtered.map", "old_noLDfilter_Labrador_220k_filtered.map",
                            "old_noLDfilter_Newfoundland_220k_filtered.map", "old_noLDfilter_STLawrence_220k_filtered.map"]
    DATA_PATH = "../data/raw/LD_files/"
    #file = "../data/raw/wildNA_220k_vulnerability_work.map"

    for old in OLD_MAPS_TO_UPDATE:
        print(f'on file: {old}')
        in_file = DATA_PATH+old
        out_file = DATA_PATH+V3_PREFIX+old
        old_map = read_map_file(in_file, header=False)
        new_map = update_map_file(old_map, v3_map_impute)
        write_map_file(new_map, out_file)

