import gc
import pandas as pd






if __name__ == "__main__":


    """ read in the raw genotype data file, the list of individuals, 
        and the map file with the new SNP genome order."""


    #the raw file with the genotypes for each individual, dosage encoded
    #snp_data = pd.read_csv("../data/raw/Salmo_220K_Merged2022_COMPLETE_ENVmatchyear.raw", delim_whitespace=True)      
    snp_data = pd.read_csv("../data/raw/demo.raw", sep= " ")      

    snp_data.head()
    gc.collect()


    #the map file with the genome order
    snp_map = pd.read_csv("../data/raw/genome_update/Ssa220K_v3_Genome_with_approx.map", sep = "\t")

    #the cluster and river assignments of individuals
    pop_metadata = pd.read_csv("../data/interim/full_data_PCA_kmeans_cluster_info.tsv", sep = "\t")

    #repeat on these two grouping scales:

    print("run the per cluster data extraction")
    #pop_metadata.Cluster
    #pop = "St. Lawrence"
    pop_dat = []

    for pop in pop_metadata.Cluster.unique():
        #obtain the relevant information from the three dfs
        pop_df = pop_metadata[pop_metadata.Cluster == pop]
        snp_df = snp_data[ [x in pop_df.fish_id.values for x in snp_data.IID.values]]
        snp_ord_list = snp_map.SNP.values


def treemix_summarize(snp_df, snp_ord_list):

    #snp = snp_ord_list[0]
    #snp = "AX-87249926"
    for snp in snp_ord_list:
        snp_col_name = snp_df.columns[[snp in x for x in snp_df.columns]][0]

        snp_col = snp_df[snp_col_name]
        #drop the NAs and make them into integers
        snp_col = snp_col.dropna().astype(int)
        gt_counts = snp_col.value_counts()

        gt_counts.dropna()

        AA_count = gt_counts[0]
        if 1 in gt_counts.index:
            AB_count = gt_counts[1]
        else:
            AB_count = 0
        if 2 in gt_counts.index:
            BB_count = gt_counts[2]
        else:
            BB_count = 0



    print("repeat for the per river basis")
    #pop_metadata.location_id
    #river = "ARO"
    for river in pop_metadata.location_id.unique():
        pop_df = pop_metadata[pop_metadata.location_id == river]
        snp_df = snp_data[ [x in pop_df.fish_id.values for x in snp_data.IID.values]]
        snp_ord_list = snp_map.SNP.values



    """ for each of the three populations, and each river:
        obtain the major and minor allele counts for each marker, 
        store in a dict"""


    """ generate two output files, one for the populations, and one
        for the rivers.
            
            pop1 pop2 pop3 pop4
            5,1 1,1 4,0 0,4
            3,3 0,2 2,2 0,4
            1,5 0,2 2,2 1,3
        
        where each row is a SNP and the rows are ordered 
        as per the SNP's genome order        
    """