import gc
import pandas as pd


def treemix_summarize(snp_df, snp_ord_list):
    """ take in a list of snps and a dataframe in plink raw format, 
        generate a list of allele counts.
        Return these data as a string in format for treemix : '{countA},{countb}'"""
    snp_out_dat = []
    #snp = snp_ord_list[0]
    #snp = "AX-87249926"
    #snp = "AX-87051368"
    for i, snp in enumerate(snp_ord_list):
        if (i % 1000) == 0:
            print(f"on snp number: {i}")
        snp_col = snp_df[snp]
        #drop the NAs and make them into integers
        snp_col = snp_col.dropna().astype(int)
        gt_counts = snp_col.value_counts()
        gt_counts.dropna()
        #get the genotype counts for the the column
        if 0 in gt_counts.index:
            AA_count = gt_counts[0]
        else:
            AA_count = 0
        if 1 in gt_counts.index:
            AB_count = gt_counts[1]
        else:
            AB_count = 0
        if 2 in gt_counts.index:
            BB_count = gt_counts[2]
        else:
            BB_count = 0
        #convert from genotypes to major and minor allele counts
        A_count = (AA_count*2) + AB_count
        B_count = (BB_count*2) + AB_count
        treemix_fmt = f'{A_count},{B_count}'
        snp_out_dat.append(treemix_fmt)
    return snp_out_dat


if __name__ == "__main__":

    #name the outputs
    POP_TREEMIX_FILE = "../data/interim/treemix_population_file.txt"
    RIVER_TREEMIX_FILE = "../data/interim/treemix_river_file.txt"

    """ read in the raw genotype data file, the list of individuals, 
        and the map file with the new SNP genome order."""

    #the raw file with the genotypes for each individual, dosage encoded
    snp_data = pd.read_csv("../data/raw/Salmo_220K_Merged2022_COMPLETE_ENVmatchyear.raw", sep = " ")     
    #snp_data = pd.read_csv("../data/raw/demo.raw", sep= " ")      
    #the full data set crashes, so trying a down sample
    #snp_data = pd.read_csv("../data/raw/Salmo_220K_COMPLETE_random10k.raw", sep= " ")      
    stripped_snp_col_names = {x: x.split("_")[0] for x in snp_data.columns}
    snp_data = snp_data.rename(columns = stripped_snp_col_names)

    #not the read in style, just the size overall
    #from SalmonEuAdmix.encode import readPedMap_tsv_fmt
    #snp_data, snp_columns = readPedMap_tsv_fmt("../data/raw/Salmo_220K_Merged2022_COMPLETE_ENVmatchyear.ped", 
    #                                            "../data/raw/Salmo_220K_Merged2022_COMPLETE_ENVmatchyear.map")

    snp_data.head()
    gc.collect()

    #the map file with the genome order
    snp_map = pd.read_csv("../data/raw/genome_update/Ssa220K_v3_Genome_with_approx.map", 
                            sep = "\t")

    #the cluster and river assignments of individuals
    pop_metadata = pd.read_csv("../data/interim/full_data_PCA_kmeans_cluster_info.tsv", 
                            sep = "\t")

    #subset the analysis to just the available snps
    available_snps = set(snp_data.columns.values)
    snp_ord_list = [x for x in snp_map.SNP.values if x in available_snps]

    """ for each of the three populations, and each river:
        obtain the major and minor allele counts for each marker, 
        store in a dict"""
    #repeat on these two grouping scales:
    print("run the per cluster data extraction")
    #pop_metadata.Cluster
    #pop = "St. Lawrence"
    pop_dat = {}
    for pop in pop_metadata.Cluster.unique():
        print(f"on pop: {pop}")
        #obtain the relevant information from the three dfs
        pop_df = pop_metadata[pop_metadata.Cluster == pop]
        snp_df = snp_data[ [x in pop_df.fish_id.values for x in snp_data.IID.values]]
        #get the allele counts formatted as strings for the output
        snp_allele_counts = treemix_summarize(snp_df, snp_ord_list)
        #add to the output dict
        pop_dat[pop] = snp_allele_counts
        gc.collect()

    output_pop_df = pd.DataFrame(pop_dat)
    abbv_names = {"Labrador"  : "LAB",
                    "Newfoundland" : "NFL",
                    "St. Lawrence" : "STL"}
    output_pop_df = output_pop_df.rename(columns = abbv_names)
    output_pop_df.to_csv(POP_TREEMIX_FILE, sep = " ", index = False)

    print("repeat for the per river basis")
    river_dat = {}
    #pop_metadata.location_id
    #river = "ARO"
    for river in pop_metadata.location_id.unique():
        print(f"on river: {river}")

        pop_df = pop_metadata[pop_metadata.location_id == river]
        snp_df = snp_data[ [x in pop_df.fish_id.values for x in snp_data.IID.values]]
        #get the allele counts formatted as strings for the output
        snp_allele_counts = treemix_summarize(snp_df, snp_ord_list)
        #add to the output dict
        river_dat[river] = snp_allele_counts

    output_river_df = pd.DataFrame(river_dat)
    output_river_df.to_csv(RIVER_TREEMIX_FILE, sep = " ", index = False)


    """ generates two output files, one for the populations, and one
        for the rivers.
            
            pop1 pop2 pop3 pop4
            5,1 1,1 4,0 0,4
            3,3 0,2 2,2 0,4
            1,5 0,2 2,2 1,3
        
        where each row is a SNP and the rows are ordered 
        as per the SNP's genome order        
    """