import os
import gc
from random import seed, sample
import pandas as pd


def read_marker_list(infile):
    """read in only the list of markers from a genepop file."""
    #object to collect from the messy input
    markers = []
    #read in the lines, separating the headers from the individual info
    with open(infile) as file:
        for line in file:
            if line.rstrip() == "Pop":
                break
            markers.append(line.rstrip()) 
    return markers


def read_separated_pops_from_genepop(infile,  marker_subset = None):
    """read in a genepop file and produce file a dictonary of dataframes.
        keys are on the fly generated pop IDS, values are dataframes.
        Can optionally specify a subset of markers to keep in the output dataframes"""
    pop_id = 1
    pop_dict = {}
    header = ['id']
    #read in the lines, separating the headers from the individual info
    header_ended = False
    with open(infile) as file:
        for line in file:
            if header_ended:
                if line.rstrip() == "Pop":
                    #terminate the previous pop entry and increment
                    df = pd.DataFrame(pop_dict[pop_id], columns = header)
                    #doing the subset as the data are loaded so as to minimize the 
                    #superfluous marker data held in memory
                    if marker_subset is not None:
                        print(f"subsetting pop: {pop_id}")
                        df = df[['id', '', ] + marker_subset]
                    pop_dict[pop_id] = df
                    pop_id+=1
                    print(f"new pop: {pop_id}")
                    pop_dict[pop_id] = []
                    gc.collect()
                else:
                    #file is space delimited
                    pop_dict[pop_id].append(tuple(line.rstrip().split())) 
            else:
                if line.rstrip() == "Pop":
                    header_ended = True
                    pop_dict[pop_id] = []
                else:
                    header.append(line.rstrip())
        #make sure the last pop is changed as well
        df = pd.DataFrame(pop_dict[pop_id], columns = header)
        if marker_subset is not None:
            print(f"subsetting pop: {k}")
            df = df[['id', '', ] + marker_subset]
        pop_dict[pop_id] = df
    return pop_dict


def write_pops_to_genepop(pop_dict , outfile):
    "take a dict of populations and write to a genepop format file"
    #rewrite to this horrendus format
    output = " \n"
    header_added = False
    for _, df in pop_dict.items():
        #get the header info from the first population
        if header_added == False:
            for x in df.columns[2:]:
                output+=x
                output+="\n"
                header_added = True
        #for subsequent populations add just the genotypes
        output+="Pop\n"
        for _, row in df.iterrows():
            outline = ' '.join(row.values)
            output+=outline
            output+="\n"
    #write to file
    f = open(outfile, "w")
    f.write(output)
    f.close()


if __name__ == "__main__":
    """ read in the three different population files, label the pops so that they can be written separately.
        for each of the pops select a subset of markers (n=500). Make sure they're the same 500 markers
        across all three of the input files."""
    LOCI_NUMBER = 500
    PATH = "../data/raw/ne_work/clusters/pop_files/"
    FILES = dict(zip(["LAB", "NFL", "STL"], 
                    ["new_Labrador_220k_filtered_genpop.txt", "new_Newfoundland_220k_filtered_genpop.txt", "new_STLawrence_220k_filtered_genpop.txt"]))
    OUTNAME = "all_pops_500_loci_genepop.txt"

    loci_dict = {}
    print("get the markers lists")
    for k, f in FILES.items():
        print(f"on file: {f}")
        loci_dict[k] = set(read_marker_list(PATH+f))

    mutual_markers = set.intersection(*loci_dict.values())
    seed(1738)
    marker_subset = sample([*mutual_markers], k=LOCI_NUMBER)
    gc.collect()

    full_data_dict = {}
    #f = FILES["LAB"]
    for k, f in FILES.items():
        print(f"on file: {f}")
        infile = PATH+f
        data_dict = read_separated_pops_from_genepop(infile, marker_subset)
        for id, df in data_dict.items():
            full_data_dict[f"{k}_{id}"] = df
        gc.collect()
        
    
    write_pops_to_genepop(pop_dict = full_data_dict, outfile= PATH+OUTNAME) 

