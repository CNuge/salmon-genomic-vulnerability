#three cluster
#prefix : treemix_threepop_out
plot_tree("treemix_threepop_out")
#three cluster, with migrants
#prefix : treemix_threepop_migration2_out
plot_tree("treemix_threepop_migration2_out")
plot_tree("treemix_per_river_out")
plot_tree("treemix_per_river_out")
#metadata for the populations
clustered_full_data_PCA = read_tsv("interim/full_data_PCA_kmeans_cluster_info.tsv")
#metadata for the populations
clustered_full_data_PCA = read_tsv("full_data_PCA_kmeans_cluster_info.tsv")
clustered_full_data_PCA
names(clustered_full_data_PCA)
clustered_full_data_PCA
meta_k3_Q_vals = read_tsv("interim/cluster_and_q_data_combined.tsv")
meta_k3_Q_vals = read_tsv("cluster_and_q_data_combined.tsv")
# Determine the proportion of genetic variance derived from the home cluster
#df = meta_k3_Q_vals
#
#
cluster_native_proporiton = function(df){
values = df$CID
col_dict = c("Q3", "Q2", "Q1")
names(col_dict)  = c("LAB", "NFL", "STL")
col_select = unlist(lapply(values, function(x){col_dict[[x]]}))
native_q_val = unlist(lapply(1:nrow(df), function(i) df[i,][[col_select[[i]]]]  ))
df$home_cluster =
df$home_Q = native_q_val
return(df)
}
df = meta_k3_Q_vals
values = df$CID
col_dict = c("Q3", "Q2", "Q1")
names(col_dict)  = c("LAB", "NFL", "STL")
col_select = unlist(lapply(values, function(x){col_dict[[x]]}))
native_q_val = unlist(lapply(1:nrow(df), function(i) df[i,][[col_select[[i]]]]  ))
native_q_val
col_select
col_select
native_q_val
col_select
native_cluster = unlist(lapply(col_select, function(x){clust_dict[[x]]}))
col_select = unlist(lapply(values, function(x){col_dict[[x]]}))
clust_dict = c("LAB", "NFL", "STL")
names(clust_dict) = c("Q3", "Q2", "Q1")
native_cluster = unlist(lapply(col_select, function(x){clust_dict[[x]]}))
native_cluster
# Determine the proportion of genetic variance derived from the home cluster
#df = meta_k3_Q_vals
#
#
cluster_native_proporiton = function(df){
values = df$CID
col_dict = c("Q3", "Q2", "Q1")
names(col_dict)  = c("LAB", "NFL", "STL")
clust_dict = c("LAB", "NFL", "STL")
names(clust_dict) = c("Q3", "Q2", "Q1")
col_select = unlist(lapply(values, function(x){col_dict[[x]]}))
native_cluster = unlist(lapply(col_select, function(x){clust_dict[[x]]}))
native_q_val = unlist(lapply(1:nrow(df), function(i) df[i,][[col_select[[i]]]]  ))
df$home_cluster = native_cluster
df$home_Q = native_q_val
return(df)
}
meta_k3_Q_vals = cluster_native_proporiton(meta_k3_Q_vals)
meta_k3_Q_vals
table(meta_k3_Q_vals$location_id, meta_k3_Q_vals$home_cluster)
# Determine the proportion of genetic variance derived from the home cluster
#df = meta_k3_Q_vals
#
#
cluster_native_proporiton = function(df){
values = df$CID
col_dict = c("Q3", "Q2", "Q1")
names(col_dict)  = c("LAB", "NFL", "STL")
clust_dict = c("LAB", "NFL", "STL")
names(clust_dict) = c("Q3", "Q2", "Q1")
col_select = unlist(lapply(values, function(x){col_dict[[x]]}))
native_cluster = unlist(lapply(col_select, function(x){clust_dict[[x]]}))
native_q_val = unlist(lapply(1:nrow(df), function(i) df[i,][[col_select[[i]]]]  ))
df$home_cluster = native_cluster
df$home_Q = native_q_val
return(df)
}
meta_k3_Q_vals$total_admixed_Q = 1 - meta_k3_Q_vals$home_Q
val_table = table(meta_k3_Q_vals$location_id, meta_k3_Q_vals$home_cluster)
val_table
colnames(val_table)[max.col(val_table,ties.method="first")]
cluster_max = colnames(val_table)[max.col(val_table,ties.method="first")]
cluster_max
river_majority_cluster = colnames(val_table)[max.col(val_table,ties.method="first")]
river_majority_cluster
row.names(val_table)
names(river_majority_cluster) = row.names(val_table)
meta_k3_Q_vals$river_majority_cluster = unlist(lapply(meta_k3_Q_vals$location_id, function(x){
river_majority_cluster[[x]]
}))
meta_k3_Q_vals$river_majority_cluster
meta_k3_Q_vals
write_tsv(meta_k3_Q_vals, "interim/cluster_and_q_data_combined.tsv")
write_tsv(meta_k3_Q_vals, "cluster_and_q_data_combined.tsv")
meta_k3_Q_vals
#metadata for the populations
clustered_full_data_PCA = read_tsv("cluster_and_q_data_combined.tsv")
clustered_full_data_PCA
View(clustered_full_data_PCA)
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
#######
# location
#######
setwd("C:/Users/camnu/bin/salmon-genomic-vulnerability/scripts")
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
admixture_per_individual
names(admixture_per_individual)
admixture_per_individual
meta_k3_Q_vals
lab_cluster = meta_k3_Q_vals[meta_k3_Q_vals$CID == "LAB",]
nfl_cluster = meta_k3_Q_vals[meta_k3_Q_vals$CID == "NFL",]
stl_cluster = meta_k3_Q_vals[meta_k3_Q_vals$CID == "STL",]
hist(lab_cluster$home_Q)
hist(nfl_cluster$home_Q)
hist(stl_cluster$home_Q)
meta_k3_Q_vals$low_home_q = meta_k3_Q_vals$home_Q < 0.66
low_q_table = table(meta_k3_Q_vals$home_Q < 0.66, meta_k3_Q_vals$CID)
low_q_table
#        LAB  NFL  STL
# FALSE  391 2611 1480
# TRUE    40  633  296
prop.table(low_q_table, 2)
#
#              LAB        NFL        STL
# FALSE 0.90719258 0.80487053 0.83333333
# TRUE  0.09280742 0.19512947 0.16666667
print("10 - 20% individuals with greater than 33% mixed origin genome across the different pops")
low_home_Q_individs = meta_k3_Q_vals[meta_k3_Q_vals$home_Q < 0.66,]
low_home_Q_individs #969 fish with home q less than 66%
mixed_fish_locations = sort(table(low_home_Q_individs$location_name))
table(low_home_Q_individs$Province) #mainly NL but that is selection bias
#seems like clustered around the middle
original_totals = table(meta_k3_Q_vals$location_name)
mixed_fish_original = original_totals[names(mixed_fish_locations)]
mixed_by_location_freqs = mixed_fish_locations / mixed_fish_original
high_mixture_locations = mixed_by_location_freqs[mixed_by_location_freqs>0.5]
length(high_mixture_locations)
#29 locations displaying high admixture levels
meta_k3_Q_vals$is_high_mixture = unlist(lapply(meta_k3_Q_vals$location_name, function(x) x %in% names(high_mixture_locations)))
write_tsv(meta_k3_Q_vals, "interim/cluster_and_q_data_combined.tsv")
############
# set path
data_path = "C:/Users/camnu/bin/salmon-genomic-vulnerability/data/"
setwd(data_path)
meta_k3_Q_vals
View(meta_k3_Q_vals)
View(meta_k3_Q_vals)
write_tsv(meta_k3_Q_vals, "interim/cluster_and_q_data_combined.tsv")
table(meta_k3_Q_vals$river_majority_cluster, meta_k3_Q_vals$home_cluster)
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
is_high_mixture
lab_cluster = non_mixed_locations[non_mixed_locations$river_majority_cluster == "LAB",]
non_mixed_locations$location = non_mixed_locations$location_id
het_and_meta_non_admix = inner_join(het_dat, non_mixed_locations)
#######
# location
#######
setwd("C:/Users/camnu/bin/salmon-genomic-vulnerability/scripts")
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(colorspace)
print("load the heterozygosity information")
het_dat = read_tsv("../data/interim/per_location_heterozygosity_summary.tsv")
#drop low sample size locations
het_dat = het_dat[het_dat$n_individuals > 10,]
table(het_dat$n_individuals)
print("load the heterozygosity information")
het_dat = read_tsv("../data/interim/per_location_heterozygosity_summary.tsv")
#drop low sample size locations
het_dat = het_dat[het_dat$n_individuals > 10,]
table(het_dat$n_individuals)
print("assess varability of heterozygosity per location")
hist(het_dat$n_individuals)
hist(het_dat$mean_obvs_het) #normally distributed
hist(het_dat$mean_expe_het) #normally distributed
print("load the info on locaiton admixture and filter the high admix locations out")
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
#is_high_mixture indictes the locations with >50% of indiviauls being low home Q
# table(admixture_per_individual$is_high_mixture, admixture_per_individual$location_id)
print("limiting analysis to the non admixture locations (where heterozygosity presumably increased)")
non_mixed_locations = admixture_per_individual[admixture_per_individual$is_high_mixture == FALSE,]
#split the subsequent locations by the majority assignment for the location
lab_cluster = non_mixed_locations[non_mixed_locations$river_majority_cluster == "LAB",]
nfl_cluster = non_mixed_locations[non_mixed_locations$river_majority_cluster == "NFL",]
stl_cluster = non_mixed_locations[non_mixed_locations$river_majority_cluster == "STL",]
hist(lab_cluster$home_Q)
hist(nfl_cluster$home_Q)
hist(stl_cluster$home_Q)
print("join the two data sets")
non_mixed_locations$location = non_mixed_locations$location_id
het_and_meta_non_admix = inner_join(het_dat, non_mixed_locations)
table(het_and_meta_non_admix$location)
keep = c("location", "lat", "lon", "n_individuals", "mean_obvs_het", "CID")
het_and_meta_non_admix = het_and_meta_non_admix[keep]
het_and_meta_non_admix = het_and_meta_non_admix[!duplicated(het_and_meta_non_admix),]
##########
# plot locations on a map as scatter plot, and three separate scatter plots
print("plot the PC values on a map as points")
world = ne_countries(scale = "medium", returnclass = "sf")
class(world)
# #plot a sub region
lat_min = min(het_and_meta_non_admix$lat, na.rm = TRUE)
lat_max = max(het_and_meta_non_admix$lat, na.rm = TRUE)
long_min = min(het_and_meta_non_admix$lon, na.rm = TRUE)
long_max = max(het_and_meta_non_admix$lon, na.rm = TRUE)
#
theme_set(theme_bw())
print("all locations all admixture")
admixture_per_individual$location = admixture_per_individual$location_id
het_and_meta_all = inner_join(het_dat, admixture_per_individual)
table(het_and_meta_all$location)
het_and_meta_all = het_and_meta_all[keep]
het_and_meta_all = het_and_meta_all[!duplicated(het_and_meta_all),]
all_het_map = ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(long_min - 1, long_max + 1),
ylim = c(lat_min - 1, lat_max + 1), expand = FALSE) +
geom_point(aes(x = lon, y = lat, colour = mean_obvs_het, size = n_individuals),
data = het_and_meta_all, alpha = 0.58) +
scale_colour_continuous_sequential("Viridis", na.value = "transparent", end=0.0, begin = 1.0) +
scale_size(range = c(2, 6)) +
theme_bw() +
theme(legend.position = "bottom")+
labs(title = "Mean heterozygosity per location, all locations",
subtitle = "including high admixture locations",
color = "Mean heterozygosity",
size = "number of individuals")
ggsave('../data/external/heterozygosity_map_points_all.png', all_het_map)
print("all locations with low admixture")
all_lowadd_het_map = ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(long_min - 1, long_max + 1),
ylim = c(lat_min - 1, lat_max + 1), expand = FALSE) +
geom_point(aes(x = lon, y = lat, colour = mean_obvs_het, size = n_individuals),
data = het_and_meta_non_admix, alpha = 0.8) +
scale_colour_continuous_sequential("Viridis", na.value = "transparent", end=0.0, begin = 1.0) +
scale_size(range = c(2, 6)) +
theme_bw() +
theme(legend.position = "bottom")+
labs(title = "Mean heterozygosity per location, all locations",
subtitle = "locations with less than 50% high admixture individuals",
color = "Mean heterozygosity",
size = "number of individuals")
ggsave('../data/external/heterozygosity_map_points_all_low_admixture.png', all_lowadd_het_map)
print("LAB only")
LAB_cluster = het_and_meta_non_admix[het_and_meta_non_admix$CID == "LAB",]
LAB_cluster = LAB_cluster[LAB_cluster$lat > 50.,]
# #plot a sub region
lat_min = min(LAB_cluster$lat, na.rm = TRUE)
lat_max = max(LAB_cluster$lat, na.rm = TRUE)
long_min = min(LAB_cluster$lon, na.rm = TRUE)
long_max = max(LAB_cluster$lon, na.rm = TRUE)
LAB_het_map = ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(long_min - 1, long_max + 1),
ylim = c(lat_min - 1, lat_max + 1), expand = FALSE) +
geom_point(aes(x = lon, y = lat, colour = mean_obvs_het, size = n_individuals),
data = LAB_cluster)+
scale_colour_continuous_sequential("Viridis", na.value = "transparent", end=0.0, begin = 1.0) +
scale_size(range = c(2, 6)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Mean heterozygosity per location. LAB only",
subtitle = "locations with less than 50% high admixture individuals",
color = "Mean heterozygosity",
size = "number of individuals")
ggsave('../data/external/heterozygosity_map_points_LAB.png', LAB_het_map)
print("STL only")
STL_cluster = het_and_meta_non_admix[het_and_meta_non_admix$CID == "STL",]
STL_cluster = STL_cluster[STL_cluster$lon < -55.,]
# #plot a sub region
lat_min = min(STL_cluster$lat, na.rm = TRUE)
lat_max = max(STL_cluster$lat, na.rm = TRUE)
long_min = min(STL_cluster$lon, na.rm = TRUE)
long_max = max(STL_cluster$lon, na.rm = TRUE)
STL_het_map = ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(long_min - 1, long_max + 1),
ylim = c(lat_min - 1, lat_max + 1), expand = FALSE) +
geom_point(aes(x = lon, y = lat, colour = mean_obvs_het, size = n_individuals),
data = STL_cluster)+
scale_colour_continuous_sequential("Viridis", na.value = "transparent", end=0.0, begin = 1.0) +
scale_size(range = c(2, 6)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Mean heterozygosity per location. STL only",
subtitle = "locations with less than 50% high admixture individuals",
color = "Mean heterozygosity",
size = "number of individuals")
ggsave('../data/external/heterozygosity_map_points_STL.png', STL_het_map)
print("NFL only")
NFL_cluster = het_and_meta_non_admix[het_and_meta_non_admix$CID == "NFL",]
NFL_cluster = NFL_cluster[NFL_cluster$lon > -58.,]
# #plot a sub region
lat_min = min(NFL_cluster$lat, na.rm = TRUE)
lat_max = max(NFL_cluster$lat, na.rm = TRUE)
long_min = min(NFL_cluster$lon, na.rm = TRUE)
long_max = max(NFL_cluster$lon, na.rm = TRUE)
NFL_het_map = ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(long_min - 1, long_max + 1),
ylim = c(lat_min - 1, lat_max + 1), expand = FALSE) +
geom_point(aes(x = lon, y = lat, colour = mean_obvs_het, size = n_individuals), data = NFL_cluster)+
scale_colour_continuous_sequential("Viridis", na.value = "transparent", end=0.0, begin = 1.0) +
scale_size(range = c(2, 6)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(title = "Mean heterozygosity per location. NFL only",
subtitle = "locations with less than 50% high admixture individuals",
color = "Mean heterozygosity",
size = "number of individuals")
ggsave('../data/external/heterozygosity_map_points_NFL.png', NFL_het_map)
#######
# location
#######
setwd("C:/Users/camnu/bin/salmon-genomic-vulnerability/data/interim/")
library(tidyverse)
#######
# functions
#######
source("../../scripts/treemix_plotting_funcs.r")
#metadata for the populations
clustered_full_data_PCA = read_tsv("cluster_and_q_data_combined.tsv")
clustered_full_data_PCA
#three cluster
#prefix : treemix_threepop_out
plot_tree("treemix_threepop_out")
#metadata for the populations
clustered_full_data_PCA = read_tsv("cluster_and_q_data_combined.tsv")
clustered_full_data_PCA
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", "treemix_river_order")
88-22
149-88
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", "treemix_river_order")
#three cluster, with migrants
#prefix : treemix_threepop_migration2_out
plot_tree("treemix_threepop_migration2_out")
#three cluster
#prefix : treemix_threepop_out
plot_tree("treemix_threepop_out")
#three cluster, with migrants
#prefix : treemix_threepop_migration2_out
plot_tree("treemix_threepop_migration2_out")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", "treemix_river_order")
plot_tree("treemix_per_river_out")
?plot_tree
plot_tree
plot_tree("treemix_per_river_out", "treemix_river_order", plotnames = T)
plot_tree("treemix_per_river_out")
plot_tree("treemix_per_river_out")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out")
plot_resid("treemix_per_river_out", "treemix_river_order")
plot_resid("treemix_per_river_out", "treemix_river_order")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out")
?plot_tree
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", plotmig = F)
plot_tree("treemix_per_river_out", plotmig = F)
#three cluster, with migrants
#prefix : treemix_threepop_migration2_out
plot_tree("treemix_threepop_migration2_out")
#three cluster
#prefix : treemix_threepop_out
plot_tree("treemix_threepop_out")
plot_resid("treemix_per_river_out", "treemix_river_order")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", plotmig = F)
plot_resid("treemix_per_river_out")
plot_resid("treemix_per_river_out", "treemix_river_order")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", mbar = F)
#three cluster
#prefix : treemix_threepop_out
plot_tree("treemix_threepop_out", mbar = F)
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", mbar = F)
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", "treemix_river_order" , mbar = F)
plot_tree("treemix_per_river_out", "treemix_river_order" , mbar = F)
plot_resid("treemix_per_river_out", "treemix_river_order")
#ordered by majority cluster and then latitude
plot_tree("treemix_per_river_out", "treemix_river_order" , mbar = F)
o = "treemix_river_order"
o = read.table(o, as.is = T, comment.char = "", quote = "")
o
stem = "treemix_per_river_out"
mbar = F
d = paste(stem, ".vertices.gz", sep = "")
e = paste(stem, ".edges.gz", sep = "")
se = paste(stem, ".covse.gz", sep = "")
d = read.table(gzfile(d), as.is = T, comment.char = "", quote = "")
e = read.table(gzfile(e), as.is  = T, comment.char = "", quote = "")
if (!is.na(o)){
o = read.table(o, as.is = T, comment.char = "", quote = "")
}
o
!is.na(o)
o = "treemix_river_order"
!is.na(o)
o = read.table(o, as.is = T, comment.char = "", quote = "")
e[,3] = e[,3]*e[,4]
e[,3] = e[,3]*e[,4]
se = read.table(gzfile(se), as.is = T, comment.char = "", quote = "")
m1 = apply(se, 1, mean)
m = mean(m1)
#m = 0
for(i in 1:length(flip)){
d = flip_node(d, flip[i])
}
cex = 1, disp = 0.003, plus = 0.01, flip = vector()
cex = 1
disp = 0.003
plus = 0.01
flip = vector()
arrow = 0.05
scale = T
ybar = 0.1
mbar =F
plotmig = T
plotnames = T
xmin = 0
se = read.table(gzfile(se), as.is = T, comment.char = "", quote = "")
se
m1 = apply(se, 1, mean)
m = mean(m1)
#m = 0
for(i in 1:length(flip)){
d = flip_node(d, flip[i])
}
d$x = "NA"
d$y = "NA"
d$ymin = "NA"
d$ymax = "NA"
d$x = as.numeric(d$x)
d$y = as.numeric(d$y)
d$ymin = as.numeric(d$ymin)
d$ymax = as.numeric(d$ymax)
d = set_y_coords(d)
d = set_x_coords(d, e)
print(d)
d = set_mig_coords(d, e)
plot_tree_internal(d, e, o = o, cex = cex, xmin = xmin, disp = disp, plus = plus, arrow = arrow, ybar = ybar, mbar = mbar, mse = m, scale = scale, plotmig = plotmig, plotnames = plotnames, lwd = lwd, font = font)
plot(d$x, d$y, axes = F, ylab = "", xlab = "Drift parameter", xlim = c(xmin, max(d$x)+plus), pch = "")
axis(1)
mw = max(e[e[,5]=="MIG",4])
mcols = rev(heat.colors(150))
#metadata for the populations
clustered_full_data_PCA = read_tsv("cluster_and_q_data_combined.tsv")
View(clustered_full_data_PCA)
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
#######
# location
#######
setwd("C:/Users/camnu/bin/salmon-genomic-vulnerability/scripts")
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(colorspace)
print("load the heterozygosity information")
het_dat = read_tsv("../data/interim/per_location_heterozygosity_summary.tsv")
#drop low sample size locations
het_dat = het_dat[het_dat$n_individuals > 10,]
table(het_dat$n_individuals)
print("assess varability of heterozygosity per location")
hist(het_dat$n_individuals)
hist(het_dat$mean_obvs_het) #normally distributed
hist(het_dat$mean_expe_het) #normally distributed
print("load the info on locaiton admixture and filter the high admix locations out")
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
View(admixture_per_individual)
View(admixture_per_individual)
table(admixture_per_individual)
table(admixture_per_individual$SiteCode)
admixture_per_individual = read_tsv("../data/interim/cluster_and_q_data_combined.tsv")
admixture_per_individual$location = admixture_per_individual$location_id
het_and_meta_all = inner_join(het_dat, admixture_per_individual)
write_tsv(het_and_meta_all, "../data/summary_s1_table_source.tsv")
admixture_per_individual
table(het_and_meta_all$location, het_and_meta_all$Cluster)
table(het_and_meta_all$location, het_and_meta_all$low_home_q)
?table
table(het_and_meta_all$location, het_and_meta_all$Cluster) / sum(table(het_and_meta_all$location, het_and_meta_all$Cluster))
table(het_and_meta_all$location, het_and_meta_all$low_home_q) / sum(table(het_and_meta_all$location, het_and_meta_all$low_home_q))
prop.table(het_and_meta_all$location, het_and_meta_all$Cluster)
prop.table(table((het_and_meta_all$location, het_and_meta_all$Cluster))
table(het_and_meta_all$location, het_and_meta_all$low_home_q)
prop.table(table(het_and_meta_all$location, het_and_meta_all$Cluster))
prop.table(table(het_and_meta_all$location, het_and_meta_all$low_home_q))
