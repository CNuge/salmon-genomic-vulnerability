library
install.packages('tidyverse')
install.packages('coil')
install.packages('aphid')
library("aphid")
states <- c("Begin", "Fair", "Loaded")
residues <- paste(1:6)
### Define transition probability matrix A
A <- matrix(c(0, 0, 0, 0.99, 0.95, 0.1, 0.01, 0.05, 0.9), nrow = 3)
dimnames(A) <- list(from = states, to = states)
### Define emission probability matrix E
E <- matrix(c(rep(1/6, 6), rep(1/10, 5), 1/2), nrow = 2, byrow = TRUE)
dimnames(E) <- list(states = states[-1], residues = residues)
### Create the HMM object
x <- structure(list(A = A, E = E), class = "HMM")
states
residues
data(casino)
### The actual path is stored in the names attribute of the sequence
actual <- c("F", "L")[match(names(casino), c("Fair", "Loaded"))]
### Find the predicted path
vit1 <- Viterbi(x, casino)
predicted <- c("F", "L")[vit1$path + 1]
predicted
casino.post <- posterior(x, casino)
plot(1:300, seq(0, 1, length.out = 300), type = "n", xlab = "Roll number",
ylab = "Posterior probability of dice being fair")
starts <- which(c("L", actual) == "F" & c(actual, "F") == "L")
ends <- which(c("F", actual) == "L" & c(actual, "L") == "F") - 1
for(i in 1:6) rect(starts[i], 0, ends[i], 1, col = "grey", border = NA)
lines(1:300, casino.post[1, ])
x
casino
installed.packages('motus')
installed.package('motus')
installed.packages('motus')
install.packages("remotes")
install_github("MotusWTS/motus")
library(remotes)
install_github("MotusWTS/motus")
#install.packages("ggmap")
library(ggmap)
library(motus)
# we must install and load other packages we will be using to manipulate and visualize these data
#install.packages("maps")
library(maps)
?motus
# we must install and load other packages we will be using to manipulate and visualize these data
#install.packages("maps")
library(maps)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("rworldmap")
library(rworldmap)
#install.packages("ggmap")
library(ggmap)
library(motus)
library(lubridate)
# Set the system environment time zone to Greenwich Mean Time (UTC), to ensure that you are always working in UTC. This should be part of every working session.
Sys.setenv(TZ = "UTC")
# Lets start by determining what our working directory is so we know where our file will be saved.
getwd()
setwd("C:/Users/camnu/Desktop")
setwd("C:/Users/camnu/")
# Lets start by determining what our working directory is so we know where our file will be saved.
getwd()
setwd("C:/Users/camnu/Documents/")
# Lets start by determining what our working directory is so we know where our file will be saved.
getwd()
# receivers: "SG-4940RPI33FB7" (Sexton Site), "SG-B17ERPI36118" (Jiggens Bluff), "SG-9E7GRPI37554	" Plum Lake West
# download receiver data for one of the receivers
proj.num <- "SG-4940RPI33FB7"
# As you or other users upload data to our server, you may have additional tag detections that weren't present in your initial data download. Since the .motus file is a SQLite database, you can update your existing file with any newly available data, rather than doing a complete new download of the entire database. To open and update a detections database that already exists (has been downloaded previously), we use the tagme() function but set new = FALSE:
sql.motus <- tagme(projRecv = proj.num, new = FALSE, update = TRUE, dir = "./")
# To check if new data are available for your project or receiver without downloading the data, you can use the tellme() function
tellme(projRecv = proj.num)
#If you are working offline, and simply want to open an already downloaded database without connecting to the server to update, use new = FALSE and update = FALSE:
sql.motus <- tagme(projRecv = proj.num, new = FALSE, update = FALSE)
library(dplyr) # load dplyr package to use "tbl" function below
# this retrieves the "alltags" table from the "sql.motus" SQLite file we read in earlier
tbl.alltags <- tbl(sql.motus, "alltags") # virtual table
# receivers: "SG-4940RPI33FB7" (Sexton Site), "SG-B17ERPI36118" (Jiggens Bluff), "SG-9E7GRPI37554	" Plum Lake West
# download receiver data for one of the receivers
proj.num <- "SG-4940RPI33FB7"
sql.motus <- tagme(projRecv = proj.num, new = TRUE, update = TRUE)
sql.motus <- tagme(projRecv = proj.num, new = TRUE, update = TRUE)
sql.motus <- tagme(projRecv = proj.num, new = TRUE, update = TRUE)
# receivers: "SG-4940RPI33FB7" (Sexton Site), "SG-B17ERPI36118" (Jiggens Bluff), "SG-9E7GRPI37554	" Plum Lake West
# download receiver data for one of the receivers
proj.num <- "SG-4940RPI33FB7"
sql.motus <- tagme(projRecv = proj.num, new = TRUE, update = TRUE)
install.packages("tidyverse")
library(tidyverse)
library(data.table)
library(FactoMineR)
library(factoextra)
library(tidyverse)
library(data.table)
library(FactoMineR)
library(factoextra)
install.packages(c("ade4", "adegenet", "adespatial", "BiocManager", "blob", "brew", "broom", "bslib", "callr", "car", "caret", "classInt", "cli", "clipr", "colorspace", "commonmark", "conquer", "crayon", "DBI", "dbplyr", "dendextend", "desc", "devtools", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "fontawesome", "forcats", "foreach", "formatR", "future", "future.apply", "generics", "gert", "ggforce", "ggplot2", "globals", "glue", "googlesheets4", "gower", "GPArotation", "gtools", "haven", "hms", "htmltools", "httr", "igraph", "ipred", "iterators", "jsonlite", "knitr", "latticeExtra", "lavaan", "lme4", "magrittr", "maptools", "matrixStats", "mnormt", "modelr", "nloptr", "openssl", "packrat", "parallelly", "pkgload", "plyr", "polynom", "processx", "progressr", "proxy", "ps", "psychTools", "quantreg", "randomForest", "raster", "Rcpp", "RcppArmadillo", "RcppCNPy", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "reprex", "reshape", "restfulr", "rlang", "rmarkdown", "RNeXML", "roxygen2", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "rvest", "s2", "sass", "segmented", "seqinr", "sf", "shiny", "skimr", "sp", "spdep", "stringi", "stringr", "terra", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tweenr", "tzdb", "units", "usethis", "uuid", "vctrs", "vegan", "waldo", "xfun", "XML", "yaml"))
library(tidyverse)
install.packages("scales")
install.packages("scales")
library(tidyverse)
library(data.table)
install.packages('tidyverse')
library(tidyverse)
restart()
library(tidyverse)
library(data.table)
library(FactoMineR)
library(factoextra)
full_metadata = read_tsv("interim/salmo_220K_wildNA_ENVmatchyear_full_Metadata.tsv")
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(tidyverse)
install.packages("rlang")
remove.packages("tidyverse")
install.packages('tidyverse')
remove.packages("rlang")
remove.packages("tidyverse")
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
library(data.table)
library(FactoMineR)
install.packages("dplyr"
)
library(tidyverse)
library(data.table)
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
updateR()
library(tidyverse)
print("extract just the significant locations from the data")
setwd("C:/Users/camnu/bin/salmon-euro-introgression/scripts/")
getwd()
setwd("C:/Users/camnu/bin/salmon-genomic-vulnerability/scripts")
library(tidyverse)
full_hw = read_table("../data/raw/HW_files/full_220k_filtered_HW_out.hwe")
full_hw
climate_df = read_csv("../data/raw/ClimateDataSalmon_1980_2022.csv")
clustered_full_data_PCA = read_tsv( "../data/interim/full_data_PCA_kmeans_cluster_info.tsv")
climate_df
clustered_full_data_PCA
climate_df
unique(climate_df$Name)
location = "ENG"
sub_df = climate_df[climate_df$Name == location,]
sub_df
names(sub_df)
table(sub_df$Year)
climate_vars = c("Minimum.Air.Temperature", "Air.Temperature" ,        "Maximum.Air.Temperature", "Total.Precipitation"    ,
"Dew.Point.Temperature" ,  "Relative.Humidity"  ,     "Wind.Direction"  ,        "Solar.Radiation"    ,
"Atmospheric.Pressure"  ,  "Snow.Precipitation",      "Snow.Depth.Accumulation", "Snow.Water.Equivalent"  ,
"Wind.Speed.at.2.meters")
climate_vars
difftime("1980-01-01" , "1980-01-04"  , units = "days")
difftime("1980-01-04", "1979-12-31", units = "days")
x = difftime("1980-01-04", "1979-12-31", units = "days")
x
x+1
int(x)
as.int(x)
as_int(x)
x = as.numeric(difftime("1980-01-04", "1979-12-31", units = "days"))
x
x = as.numeric(difftime("1980-01-04", "1979-12-31", units = "days"))[[1]]
x
climate_df$Day
diff_days = function(year, month, day, baseline = "1979-12-31"){
as.numeric(difftime("1980-01-04",baseline , units = "days"))
}
climate_df$time_series_x = unlist(lapply(1:nrow(climate_df, function(i){
diff_days(climate_df$Year[[i]], climate_df$Month[[i]], climate_df$Day[[i]])
})))
climate_df$time_series_x = unlist(lapply(1:nrow(climate_df), function(i){
diff_days(climate_df$Year[[i]], climate_df$Month[[i]], climate_df$Day[[i]])
}))
diff_days = function(year, month, day, baseline = "1979-12-31"){
as.numeric(difftime(paste0(year, "-", month,"-", day), baseline , units = "days"))
}
climate_df$time_series_x = unlist(lapply(1:nrow(climate_df), function(i){
diff_days(climate_df$Year[[i]], climate_df$Month[[i]], climate_df$Day[[i]])
}))
climate_df$time_series_x
climate_df
write_csv(climate_df, "../data/raw/MODDED_ClimateDataSalmon_1980_2022.csv")
location = "ENG"
clim_var = "Air.Temperature"
#has the per day info for 1980 - 2022
sub_df = climate_df[climate_df$Name == location,]
sub_df
clim_var
#put the given variable into the formula
assoc_test = lm(as.formula(paste0(clim_var, "~time_series_x")), sub_df)
assoc_test
clim_var
time_series_x
time_val = "time_series_x"
clim_var ="Air.Temperature"
time_val = "time_series_x"
out =  ggplot() +
geom_point(data = df, aes(x = time_val, y = clim_var))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", y_col ))+
xlab("date series from Jan 1 1980") +
ylab(y_col) +
theme_classic()
df = sub_df
clim_var ="Air.Temperature"
time_val = "time_series_x"
out =  ggplot() +
geom_point(data = df, aes(x = time_val, y = clim_var))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", y_col ))+
xlab("date series from Jan 1 1980") +
ylab(y_col) +
theme_classic()
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = Air.Temperature))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", y_col ))+
xlab("date series from Jan 1 1980") +
ylab(y_col) +
theme_classic()
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = as.formula(clim_var)))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(y_col) +
theme_classic()
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = as.formula(clim_var)))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = as.str(clim_var)))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
clim_var
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = as.name(clim_var)))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = as.symbol(clim_var)))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
as.symbol(clim_var)
sub_df$Air.Temperature
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = Air.Temperature))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
out =  ggplot() +
geom_point(data = sub_df, aes(x = time_series_x, y = .data[[clim_var]]))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
plot_time_series = function(df, time_val, clim_var){
out =  ggplot() +
geom_point(data = df, aes(x = .data[[time_val]], y = .data[[clim_var]]))  +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
}
out =  ggplot() +
geom_point(data = df, aes(x = .data[[time_val]], y = .data[[clim_var]]))+
geom_smooth(method=lm , color="red", se=TRUE) +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
out =  ggplot(data = df, aes(x = .data[[time_val]], y = .data[[clim_var]])) +
geom_point()+
geom_smooth(method=lm , color="red", se=TRUE) +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
out
#put the given variable into the formula
assoc_test = lm(as.formula(paste0(clim_var, "~time_series_x")), sub_df)
assoc_test
intercept = assoc_test$coefficients[[2]]
slope = assoc_test$coefficients[[2]]
trend_df = data.frame()
location_trends = data.frame()
trends = data.frame(clim_var = clim_var, intercept = intercept, slope = slope)
trends
location_trends = rbind(location_trends, trends)
location_trends
location_trends = rbind(location_trends, trends)
location_trends$location = location
location_trends
location_trends
trend_df = data.frame()
#location = "ENG"
for (location in unique(climate_df$Name)){
print(paste0("on location: ", location))
#has the per day info for 1980 - 2022
sub_df = climate_df[climate_df$Name == location,]
location_trends = data.frame()
#clim_var = "Air.Temperature"
for(clim_var in climate_vars){
print(pasteo("on variable: ", clim_var))
#put the given variable into the formula
assoc_test = lm(as.formula(paste0(clim_var, "~time_series_x")), sub_df)
intercept = assoc_test$coefficients[[2]]
slope = assoc_test$coefficients[[2]]
trends = data.frame(clim_var = clim_var, intercept = intercept, slope = slope)
location_trends = rbind(location_trends, trends)
}
location_trends$location = location
trend_df = rbind(trend_df, location_trends)
}
trend_df = data.frame()
#location = "ENG"
for (location in unique(climate_df$Name)){
print(paste0("on location: ", location))
#has the per day info for 1980 - 2022
sub_df = climate_df[climate_df$Name == location,]
location_trends = data.frame()
#clim_var = "Air.Temperature"
for(clim_var in climate_vars){
print(paste0("on variable: ", clim_var))
#put the given variable into the formula
assoc_test = lm(as.formula(paste0(clim_var, "~time_series_x")), sub_df)
intercept = assoc_test$coefficients[[2]]
slope = assoc_test$coefficients[[2]]
trends = data.frame(clim_var = clim_var, intercept = intercept, slope = slope)
location_trends = rbind(location_trends, trends)
}
location_trends$location = location
trend_df = rbind(trend_df, location_trends)
}
trend_df
write_tsv(trend_df, "../data/interim/per_location_env_var_slopes.csv")
eng_temp_plot = plot_time_series(sub_df, "time_series_x", "Air.Temperature")
ggsave(eng_temp_plot, "../data/example_slope_plot.png")
?ggsave
ggsave("../data/example_slope_plot.png", eng_temp_plot)
trend_df
trend_df
trend_df
trend_df = as_tibble(trend_df)
trend_df
trend_df
trendline_boxplots =  ggplot(data = trend_df, aes(x = clim_var, y = slope)) +
geom_boxplot()+
labs(title = "variation in environmental variable slopes across locations",
subtitle = "")+
xlab("climate variable") +
ylab("slope of time series trendline")
trendline_boxplots
trend_df
sub_trend_df = trend_df[trend_df$slope > -0.1,]
sub_trend_df = sub_trend_df[sub_trend_df$slope < 0.1,]
outliers = trend_df[trend_df$slope < -0.1,]
outliers = outliers[outliers$slope > 0.1,]
outliers
trend_df[trend_df$slope < -0.1,]
outliers_a = trend_df[trend_df$slope < -0.1,]
outliers_b = trend_df[trend_df$slope > 0.1,]
outliers_a
outliers_b
outliers_b = trend_df[trend_df$slope > 0.025,]
outliers_b
outliers_b = trend_df[trend_df$slope > 0.02,]
outliers_b
outliers_a
outliers_b
outliers_a
outliers_b
sub_trend_df = trend_df[trend_df$slope > -0.1,]
sub_trend_df = sub_trend_df[sub_trend_df$slope < 0.1,]
trendline_boxplots =  ggplot(data = sub_trend_df, aes(x = clim_var, y = slope)) +
geom_boxplot()+
labs(title = "variation in environmental variable slopes across locations",
subtitle = "")+
xlab("climate variable") +
ylab("slope of time series trendline")
trendline_boxplots
sub_trend_df = trend_df[trend_df$slope > -0.02,]
sub_trend_df = sub_trend_df[sub_trend_df$slope < 0.02,]
trendline_boxplots =  ggplot(data = sub_trend_df, aes(x = clim_var, y = slope)) +
geom_boxplot()+
labs(title = "variation in environmental variable slopes across locations",
subtitle = "")+
xlab("climate variable") +
ylab("slope of time series trendline")
trendline_boxplots
outliers_a = trend_df[trend_df$slope < -0.02,]
outliers_b = trend_df[trend_df$slope > 0.02,]
outliers_a
outliers_b
outliers_a
outliers_b
trendline_boxplots =  ggplot(data = sub_trend_df, aes(x = clim_var, y = slope)) +
geom_boxplot()+
labs(title = "variation in environmental variable slopes across locations",
subtitle = "outliers of >0.02 and < 0.02 removed (2 points)")+
xlab("climate variable") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("slope of time series trendline")
trendline_boxplots
trendline_boxplots =  ggplot(data = sub_trend_df, aes(x = clim_var, y = slope)) +
geom_boxplot()+
labs(title = "variation in environmental variable slopes across locations",
subtitle = "dropped outliers of >0.02 and < 0.02 (2 points removed)")+
xlab("climate variable") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("slope of time series trendline")
ggsave("../data/trendline_boxplots.png", trendline_boxplots)
sub_df
eng_dir_plot = plot_time_series(sub_df, "time_series_x", "Wind.Direction")
eng_dir_plot
plot_time_series = function(df, time_val, clim_var){
out =  ggplot(data = df, aes(x = .data[[time_val]], y = .data[[clim_var]])) +
geom_point()+
geom_smooth(method=lm , color="red", se=TRUE) +
labs(title = paste0("Time series plot for location: ", location ),
subtitle = paste0("Response variable: ", clim_var ))+
xlab("date series from Jan 1 1980") +
ylab(clim_var) +
theme_classic()
}
eng_dir_plot = plot_time_series(sub_df, "time_series_x", "Wind.Direction")
eng_dir_plot
ggsave("../data/example_slope_plot2.png", eng_dir_plot)
