import os
from random import sample
import pandas as pd

def subset_individuals_genepop(infile, outfile, n = 400):
    """read in a genepop file and produce file with random subset of individuals of specified size."""
    output = ""
    pop_seen = False
    individual_lines = []
    #read in the lines, separating the headers from the individual info
    with open(infile) as file:
        for line in file:
            if pop_seen:
                individual_lines.append(line)
            else:
                if line.rstrip() == "Pop":
                    pop_seen = True
                output += line
    #get random index positions to keep
    keep_lines = sample(range(len(individual_lines)), n)
    for i in keep_lines:
        output+=individual_lines[i]
    #write to file
    f = open(outfile, "w")
    f.write(output)
    f.close()

def subset_loci_genepop(infile, outfile, n = 400):
    """read in a genepop file and produce file with random subset of individuals of specified size."""
    pop_seen = False
    #objects to collect the messy input
    header = ["id",]
    individual_lines = []
    #read in the lines, separating the headers from the individual info
    with open(infile) as file:
        for line in file:
            if pop_seen:
                #file is space delimited
                individual_lines.append(tuple(line.rstrip().split())) 
            else:
                if line.rstrip() == "Pop":
                    pop_seen = True
                else:
                    header.append(line.rstrip())
    #make the input a tidy df
    df = pd.DataFrame(individual_lines, columns = header)
    #get random index positions to keep
    keep_cols = [0, 1] + sample(range(2, len(df.columns)), n)    
    #subset the df
    sub_df = df.iloc[:, keep_cols]
    #rewrite to this horrendus format
    output = " \n"
    for x in sub_df.columns[2:]:
        output+=x
        output+="\n"
    output+="Pop\n"
    for _, row in sub_df.iterrows():
        outline = ' '.join(row.values)
        output+=outline
        output+="\n"
    #write to file
    f = open(outfile, "w")
    f.write(output)
    f.close()

if __name__ == "__main__":

    PATH = "../data/raw/ne_work/clusters/pop_files/"
    FILES = [x for x in os.listdir(PATH) if x[:7]  == "single_"]
    OUT_PREFIX = "r400_"
    LOCI_PREFIX = "loci_400"
    for f in FILES:
        print(f"on file: {f}")
        infile = PATH+f
        outfile =  PATH+OUT_PREFIX+f
        outfile2 = PATH+LOCI_PREFIX+OUT_PREFIX+f
        subset_individuals_genepop(infile, outfile, n = 400)
        subset_loci_genepop(outfile, outfile2, n = 400)
        

    print("restriction string for the GUI, run with every 50th loci")

    outstr = "["
    for i in range(54202):
        if i % 4000 == 0:
            outstr += f"{i}-{i+1},"

    outstr = outstr[:-1] + "]" 
    print(outstr)
    print(len(outstr))